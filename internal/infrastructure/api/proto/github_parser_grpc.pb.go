// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/infrastructure/api/proto/github_parser.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GithubParserService_ParseRepository_FullMethodName     = "/github.parser.GithubParserService/ParseRepository"
	GithubParserService_ListRepositories_FullMethodName    = "/github.parser.GithubParserService/ListRepositories"
	GithubParserService_ParseIssues_FullMethodName         = "/github.parser.GithubParserService/ParseIssues"
	GithubParserService_ListIssues_FullMethodName          = "/github.parser.GithubParserService/ListIssues"
	GithubParserService_ParsePullRequests_FullMethodName   = "/github.parser.GithubParserService/ParsePullRequests"
	GithubParserService_ListPullRequests_FullMethodName    = "/github.parser.GithubParserService/ListPullRequests"
	GithubParserService_ParseUser_FullMethodName           = "/github.parser.GithubParserService/ParseUser"
	GithubParserService_ListUsers_FullMethodName           = "/github.parser.GithubParserService/ListUsers"
	GithubParserService_StartParsingJob_FullMethodName     = "/github.parser.GithubParserService/StartParsingJob"
	GithubParserService_GetParsingJobStatus_FullMethodName = "/github.parser.GithubParserService/GetParsingJobStatus"
)

// GithubParserServiceClient is the client API for GithubParserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubParserServiceClient interface {
	// Репозитории
	ParseRepository(ctx context.Context, in *ParseRepositoryRequest, opts ...grpc.CallOption) (*ParseRepositoryResponse, error)
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// Issues
	ParseIssues(ctx context.Context, in *ParseIssuesRequest, opts ...grpc.CallOption) (*ParseIssuesResponse, error)
	ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error)
	// Pull Requests
	ParsePullRequests(ctx context.Context, in *ParsePullRequestsRequest, opts ...grpc.CallOption) (*ParsePullRequestsResponse, error)
	ListPullRequests(ctx context.Context, in *ListPullRequestsRequest, opts ...grpc.CallOption) (*ListPullRequestsResponse, error)
	// Пользователи
	ParseUser(ctx context.Context, in *ParseUserRequest, opts ...grpc.CallOption) (*ParseUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Задачи парсинга
	StartParsingJob(ctx context.Context, in *StartParsingJobRequest, opts ...grpc.CallOption) (*StartParsingJobResponse, error)
	GetParsingJobStatus(ctx context.Context, in *GetParsingJobStatusRequest, opts ...grpc.CallOption) (*GetParsingJobStatusResponse, error)
}

type githubParserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubParserServiceClient(cc grpc.ClientConnInterface) GithubParserServiceClient {
	return &githubParserServiceClient{cc}
}

func (c *githubParserServiceClient) ParseRepository(ctx context.Context, in *ParseRepositoryRequest, opts ...grpc.CallOption) (*ParseRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseRepositoryResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ParseRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ListRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) ParseIssues(ctx context.Context, in *ParseIssuesRequest, opts ...grpc.CallOption) (*ParseIssuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseIssuesResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ParseIssues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIssuesResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ListIssues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) ParsePullRequests(ctx context.Context, in *ParsePullRequestsRequest, opts ...grpc.CallOption) (*ParsePullRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParsePullRequestsResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ParsePullRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) ListPullRequests(ctx context.Context, in *ListPullRequestsRequest, opts ...grpc.CallOption) (*ListPullRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPullRequestsResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ListPullRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) ParseUser(ctx context.Context, in *ParseUserRequest, opts ...grpc.CallOption) (*ParseUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseUserResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ParseUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, GithubParserService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) StartParsingJob(ctx context.Context, in *StartParsingJobRequest, opts ...grpc.CallOption) (*StartParsingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartParsingJobResponse)
	err := c.cc.Invoke(ctx, GithubParserService_StartParsingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubParserServiceClient) GetParsingJobStatus(ctx context.Context, in *GetParsingJobStatusRequest, opts ...grpc.CallOption) (*GetParsingJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParsingJobStatusResponse)
	err := c.cc.Invoke(ctx, GithubParserService_GetParsingJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubParserServiceServer is the server API for GithubParserService service.
// All implementations must embed UnimplementedGithubParserServiceServer
// for forward compatibility.
type GithubParserServiceServer interface {
	// Репозитории
	ParseRepository(context.Context, *ParseRepositoryRequest) (*ParseRepositoryResponse, error)
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// Issues
	ParseIssues(context.Context, *ParseIssuesRequest) (*ParseIssuesResponse, error)
	ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error)
	// Pull Requests
	ParsePullRequests(context.Context, *ParsePullRequestsRequest) (*ParsePullRequestsResponse, error)
	ListPullRequests(context.Context, *ListPullRequestsRequest) (*ListPullRequestsResponse, error)
	// Пользователи
	ParseUser(context.Context, *ParseUserRequest) (*ParseUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Задачи парсинга
	StartParsingJob(context.Context, *StartParsingJobRequest) (*StartParsingJobResponse, error)
	GetParsingJobStatus(context.Context, *GetParsingJobStatusRequest) (*GetParsingJobStatusResponse, error)
	mustEmbedUnimplementedGithubParserServiceServer()
}

// UnimplementedGithubParserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGithubParserServiceServer struct{}

func (UnimplementedGithubParserServiceServer) ParseRepository(context.Context, *ParseRepositoryRequest) (*ParseRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseRepository not implemented")
}
func (UnimplementedGithubParserServiceServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedGithubParserServiceServer) ParseIssues(context.Context, *ParseIssuesRequest) (*ParseIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseIssues not implemented")
}
func (UnimplementedGithubParserServiceServer) ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssues not implemented")
}
func (UnimplementedGithubParserServiceServer) ParsePullRequests(context.Context, *ParsePullRequestsRequest) (*ParsePullRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParsePullRequests not implemented")
}
func (UnimplementedGithubParserServiceServer) ListPullRequests(context.Context, *ListPullRequestsRequest) (*ListPullRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPullRequests not implemented")
}
func (UnimplementedGithubParserServiceServer) ParseUser(context.Context, *ParseUserRequest) (*ParseUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseUser not implemented")
}
func (UnimplementedGithubParserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedGithubParserServiceServer) StartParsingJob(context.Context, *StartParsingJobRequest) (*StartParsingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartParsingJob not implemented")
}
func (UnimplementedGithubParserServiceServer) GetParsingJobStatus(context.Context, *GetParsingJobStatusRequest) (*GetParsingJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParsingJobStatus not implemented")
}
func (UnimplementedGithubParserServiceServer) mustEmbedUnimplementedGithubParserServiceServer() {}
func (UnimplementedGithubParserServiceServer) testEmbeddedByValue()                             {}

// UnsafeGithubParserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubParserServiceServer will
// result in compilation errors.
type UnsafeGithubParserServiceServer interface {
	mustEmbedUnimplementedGithubParserServiceServer()
}

func RegisterGithubParserServiceServer(s grpc.ServiceRegistrar, srv GithubParserServiceServer) {
	// If the following call pancis, it indicates UnimplementedGithubParserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GithubParserService_ServiceDesc, srv)
}

func _GithubParserService_ParseRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ParseRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ParseRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ParseRepository(ctx, req.(*ParseRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ListRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_ParseIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ParseIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ParseIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ParseIssues(ctx, req.(*ParseIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_ListIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ListIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ListIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ListIssues(ctx, req.(*ListIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_ParsePullRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParsePullRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ParsePullRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ParsePullRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ParsePullRequests(ctx, req.(*ParsePullRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_ListPullRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPullRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ListPullRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ListPullRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ListPullRequests(ctx, req.(*ListPullRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_ParseUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ParseUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ParseUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ParseUser(ctx, req.(*ParseUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_StartParsingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartParsingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).StartParsingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_StartParsingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).StartParsingJob(ctx, req.(*StartParsingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubParserService_GetParsingJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParsingJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubParserServiceServer).GetParsingJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubParserService_GetParsingJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubParserServiceServer).GetParsingJobStatus(ctx, req.(*GetParsingJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GithubParserService_ServiceDesc is the grpc.ServiceDesc for GithubParserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GithubParserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.parser.GithubParserService",
	HandlerType: (*GithubParserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseRepository",
			Handler:    _GithubParserService_ParseRepository_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _GithubParserService_ListRepositories_Handler,
		},
		{
			MethodName: "ParseIssues",
			Handler:    _GithubParserService_ParseIssues_Handler,
		},
		{
			MethodName: "ListIssues",
			Handler:    _GithubParserService_ListIssues_Handler,
		},
		{
			MethodName: "ParsePullRequests",
			Handler:    _GithubParserService_ParsePullRequests_Handler,
		},
		{
			MethodName: "ListPullRequests",
			Handler:    _GithubParserService_ListPullRequests_Handler,
		},
		{
			MethodName: "ParseUser",
			Handler:    _GithubParserService_ParseUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _GithubParserService_ListUsers_Handler,
		},
		{
			MethodName: "StartParsingJob",
			Handler:    _GithubParserService_StartParsingJob_Handler,
		},
		{
			MethodName: "GetParsingJobStatus",
			Handler:    _GithubParserService_GetParsingJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/infrastructure/api/proto/github_parser.proto",
}
